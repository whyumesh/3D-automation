def read_summary_report(zbm_code, zbm_name):
    """Read the summary report Excel file for a ZBM and extract data as HTML table"""
    try:
        # Find the summary report file - use wildcard pattern without safe_zbm_name
        pattern = os.path.join(reports_folder, f"ZBM_Summary_{zbm_code}_*.xlsx")
        files = glob.glob(pattern)
        
        if not files:
            print(f"   ‚ö†Ô∏è Warning: No summary report found for {zbm_code}")
            print(f"      Searched pattern: {pattern}")
            return None
        
        report_file = os.path.abspath(files[0])
        
        # Verify file exists
        if not os.path.exists(report_file):
            print(f"   ‚ùå Summary report file does not exist: {report_file}")
            return None
        
        print(f"   üìä Reading summary report: {os.path.basename(report_file)}")
        
        # Read the Excel file
        wb = load_workbook(report_file)
        ws = wb['ZBM']
        
        # Find header row (looking for "Area Name")
        header_row = None
        for row_idx in range(1, 15):
            for col_idx in range(1, 30):
                cell_value = ws.cell(row=row_idx, column=col_idx).value
                if cell_value and 'Area Name' in str(cell_value):
                    header_row = row_idx
                    break
            if header_row:
                break
        
        if not header_row:
            print(f"   ‚ö†Ô∏è Warning: Could not find header row in summary report")
            return None
        
        # Read data starting from header row
        data = []
        headers = []
        
        # Read headers - ONLY non-empty ones
        header_col_count = 0
        for col_idx in range(1, ws.max_column + 1):
            header_val = ws.cell(row=header_row, column=col_idx).value
            if header_val and str(header_val).strip():
                headers.append(str(header_val).strip())
                header_col_count = col_idx
            else:
                # Stop when we hit the first empty header
                break
        
        print(f"   üìã Found {len(headers)} columns in summary report")
        
        # Read data rows until we hit empty or "Total" row
        for row_idx in range(header_row + 1, ws.max_row + 1):
            row_data = []
            is_empty = True
            
            # Only read up to the number of headers we found
            for col_idx in range(1, header_col_count + 1):
                cell_value = ws.cell(row=row_idx, column=col_idx).value
                if cell_value is not None:
                    is_empty = False
                row_data.append(cell_value)
            
            if is_empty:
                break
            
            # Check if this is the total row
            if row_data and len(row_data) > 1 and 'Total' in str(row_data[1]):
                data.append(row_data)
                break
            
            data.append(row_data)
        
        # Create DataFrame with only the valid columns
        df_summary = pd.DataFrame(data, columns=headers)
        
        # Convert to HTML table with styling
        html_table = df_summary.to_html(index=False, border=1, classes='summary-table', na_rep='-')
        
        return html_table
        
    except Exception as e:
        print(f"   ‚ùå Error reading summary report for {zbm_code}: {e}")
        return None
